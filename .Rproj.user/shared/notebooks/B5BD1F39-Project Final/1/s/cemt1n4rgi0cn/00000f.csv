"0"," "
"0","# Define server"
"0","server <- function(input, output, session) {"
"0","  "
"0","  selected_station_data <- reactive({"
"0","    final_data1 %>%"
"0","      filter(LIBELLE_ARRET == input$station_name)"
"0","  })"
"0","  "
"0","  # Filter data based on user inputs"
"0","  filtered_data_ref <- reactive({"
"0","    final_data1 %>%"
"0","      filter(JOUR >= input$start_date_ref, JOUR <= input$end_date_ref)"
"0","  })"
"0","  "
"0","  filtered_data_comp <- reactive({"
"0","    final_data1 %>%"
"0","      filter(JOUR >= input$start_date_comp, JOUR <= input$end_date_comp)"
"0","  })"
"0","  station_comparison_data <- reactive({"
"0","  selected_column <- input$columnSelect"
"0","  final_data1 %>%"
"0","    filter(LIBELLE_ARRET %in% c(input$station1, input$station2)) %>%"
"0","    group_by(JOUR, LIBELLE_ARRET) %>%"
"0","    summarise(Value = sum(!!as.name(selected_column), na.rm = TRUE)) %>%"
"0","    ungroup()"
"0","})"
"0",""
"0","  "
"0","  "
"0","  # Render the comparison plot"
"0","  output$station_comparison_plot <- renderPlot({"
"0","  ggplot(station_comparison_data(), aes(x = as.Date(JOUR), y = Value, color = LIBELLE_ARRET)) +"
"0","    geom_line() +"
"0","    labs(title = ""Station Comparison Over Time (Across Years)"","
"0","         x = ""Date"","
"0","         y = paste(""Total"", input$columnSelect, ""Values""),  # Dynamic Y-axis label"
"0","         color = ""Station"") +"
"0","    theme_minimal() +"
"0","    scale_x_date(name = ""Date"", date_breaks = ""1 year"", date_labels = ""%Y"") +"
"0","    theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate X-axis labels for readability"
"0","})"
"0","# Reactive filtering based on the number of top stations"
"0","filtered_data_most_used <- reactive({"
"0","  data <- final_data1 %>%"
"0","    filter(JOUR >= input$date_range[1] & JOUR <= input$date_range[2])"
"0","  "
"0","  if (input$station_type_filter != ""Both"") {"
"0","    data <- data %>% filter(ZdAType == input$station_type_filter)"
"0","  }"
"0","  "
"0","  # Convert input to numeric safely"
"0","  n_stations <- as.numeric(input$station_count_filter)"
"0","  if (is.na(n_stations)) n_stations <- 5  # Default to top 5 if conversion fails"
"0","  "
"0","  # Get top stations based on Total_NB_VALD"
"0","  top_stations <- data %>%"
"0","    group_by(LIBELLE_ARRET) %>%"
"0","    summarise(Total_Validations = sum(Total_NB_VALD, na.rm = TRUE)) %>%"
"0","    arrange(desc(Total_Validations)) %>%"
"0","    head(n = n_stations)  # Select top N stations"
"0","  "
"0","  data %>% filter(LIBELLE_ARRET %in% top_stations$LIBELLE_ARRET)"
"0","})"
"0","  "
"0","  "
"0","  observeEvent(input$station_name, {"
"0","  selected_station <- final_data1 %>%"
"0","    filter(LIBELLE_ARRET == input$station_name) %>%"
"0","    select(LIBELLE_ARRET) %>%"
"0","    distinct()"
"0","  "
"0","  output$station_stats_tab <- renderTable({"
"0","    summarise_data <- final_data1 %>%"
"0","      filter(LIBELLE_ARRET %in% selected_station$LIBELLE_ARRET) %>%"
"0","      group_by(LIBELLE_ARRET, Weekday) %>%"
"0","      summarise("
"0","        Total_Validations = sum(Total_NB_VALD, na.rm = TRUE),"
"0","        Avg_Validations = mean(Total_NB_VALD, na.rm = TRUE),"
"0","        Max_Validations = max(Total_NB_VALD, na.rm = TRUE)"
"0","      )"
"0","    return(summarise_data)"
"0","  })"
"0","  "
"0","  # Map rendering logic"
"0","  output$station_map <- renderLeaflet({"
"0","    arret_to_display <- input$station_name"
"0","    "
"0","    unique_station_data <- final_data1 %>%"
"0","      filter(LIBELLE_ARRET == arret_to_display) %>%"
"0","      distinct(LIBELLE_ARRET, ZdAXEpsg2154, ZdAYEpsg2154, .keep_all = TRUE) %>%"
"0","      slice(1)  # Use only the first row to optimize rendering"
"0","    "
"0","    if (nrow(unique_station_data) > 0) {"
"0","      # Convert to spatial object"
"0","      station_sf <- st_as_sf("
"0","        unique_station_data,"
"0","        coords = c(""ZdAXEpsg2154"", ""ZdAYEpsg2154""),"
"0","        crs = 2154"
"0","      )"
"0","      "
"0","      # Transform to EPSG 4326"
"0","      station_sf <- st_transform(station_sf, 4326)"
"0","      "
"0","      # Extract coordinates"
"0","      coords <- st_coordinates(station_sf)"
"0","      unique_station_data$X <- coords[1, ""X""]"
"0","      unique_station_data$Y <- coords[1, ""Y""]"
"0","      "
"0","      # Render Leaflet map"
"0","      leaflet() %>%"
"0","        addTiles() %>%"
"0","        setView("
"0","          lng = unique_station_data$X,"
"0","          lat = unique_station_data$Y,"
"0","          zoom = 11"
"0","        ) %>%"
"0","        addMarkers("
"0","          lng = unique_station_data$X,"
"0","          lat = unique_station_data$Y,"
"0","          popup = paste(""LIBELLE_ARRET:"", unique_station_data$LIBELLE_ARRET)"
"0","        )"
"0","    } else {"
"0","      # Default view if no data is available for the selected station"
"0","      leaflet() %>%"
"0","        addTiles() %>%"
"0","        setView(lng = 2.3522, lat = 48.8566, zoom = 10)  # Default: Paris view"
"0","    }"
"0","  })"
"0"," # Pie chart rendering logic (percentages in front of the Weekday label)"
"0","output$station_pie_chart <- renderPlot({"
"0","  summarise_data <- final_data1 %>%"
"0","    filter(LIBELLE_ARRET %in% selected_station$LIBELLE_ARRET) %>%"
"0","    group_by(Weekday) %>%"
"0","    summarise(Total_Validations = sum(Total_NB_VALD, na.rm = TRUE))"
"0","  "
"0","  # Calculate percentages"
"0","  summarise_data <- summarise_data %>%"
"0","    mutate(Percentage = prop.table(Total_Validations) * 100)"
"0","  "
"0","  ggplot(summarise_data, aes(x = """", y = Percentage, fill = Weekday)) +"
"0","    geom_bar(stat = ""identity"", width = 1, color = ""black"") +"
"0","    coord_polar(""y"", start = 0) +"
"0","    geom_text(aes(y = Percentage, label = scales::percent(Percentage / 100, accuracy = 1)),"
"0","              position = position_stack(vjust = 0.5), size = 4.5, hjust = 0.5) +"
"0","    theme_minimal() +"
"0","    labs("
"0","      title = ""Total Validations by Weekday (Percentage)"","
"0","      x = NULL,"
"0","      y = NULL,"
"0","      fill = ""Weekday"""
"0","    ) +"
"0","    theme(legend.position = ""right"")"
"0","})"
"0",""
"0",""
"0","})"
"0","  "
"0","  # Add server logic for the ""Holiday Statistics"" tab"
"0","  observeEvent(input$station_selection, {"
"0","  "
"0","  # Plot the mean by weekday"
"0","  output$mean_sum_nbdvald_plot <- renderPlot({"
"0","    station_data <- final_data1 %>%"
"0","      filter(if (input$station_selection == ""ALL"") TRUE else LIBELLE_ARRET == input$station_selection) %>%"
"0","      group_by(Weekday, HolidayType) %>%"
"0","      summarise(Mean_Sum_NB_VALD = mean(Total_NB_VALD, na.rm = TRUE))"
"0","    "
"0","    ggplot(station_data, aes(x = Weekday, y = Mean_Sum_NB_VALD, color = HolidayType)) +"
"0","      geom_point(size = 3) +"
"0","      labs(title = ""Average Number of validations Comparison by Station and Holiday days"","
"0","           x = ""Day of the Week"","
"0","           y = ""Mean Sum_NB_VALD"") +"
"0","      theme_minimal()"
"0","  })"
"0","  "
"0","  # Plot the mean by weekday and special period"
"0","  output$mean_sum_nbdvald_special_period_plot <- renderPlot({"
"0","    special_period_data <- final_data1 %>%"
"0","      filter(if (input$station_selection == ""ALL"") TRUE else LIBELLE_ARRET == input$station_selection) %>%"
"0","      group_by(Weekday, StudentHolidays) %>%"
"0","      summarise(Mean_Sum_NB_VALD = mean(Total_NB_VALD, na.rm = TRUE))"
"0","    "
"0","    ggplot(special_period_data, aes(x = Weekday, y = Mean_Sum_NB_VALD, color = StudentHolidays)) +"
"0","      geom_point(size = 3) +"
"0","      scale_color_manual(values = c(""No"" = ""blue"", ""Yes"" = ""orange"")) +"
"0","      labs(title = ""Average Number of validations Comparison by Station and School Breaks"","
"0","           x = ""Day of the Week"","
"0","           y = ""Mean Sum_NB_VALD"","
"0","           color = ""StudentHolidays"") +"
"0","      theme_minimal()"
"0","  })"
"0","})"
"0","  "
"0","   output$most_used_station_plot <- renderPlot({"
"0","  data_to_plot <- filtered_data_most_used()"
"0","  "
"0","  ggplot(data_to_plot, aes(x = LIBELLE_ARRET, y = Total_NB_VALD, fill = ZdAType)) +"
"0","    geom_bar(stat = ""identity"", position = ""dodge"") +"
"0","    labs(title = ""Total Validations by Metro and Rail Stations"","
"0","         x = ""Station"","
"0","         y = ""Total Validations"") +"
"0","    theme_minimal() +"
"0","    theme(legend.position = ""top"") +"
"0","    theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis"
"0","})"
"0","   "
"0","  observeEvent(input$time_frequency, {"
"0","  "
"0","  output$seasonality_trends_plot <- renderPlot({"
"0","    if (input$time_frequency == ""Daily"") {"
"0","      final_data1 <- final_data1 %>%"
"0","        mutate(JOUR = as.Date(JOUR))"
"0","      # Plot daily data"
"0","      final_data1 %>%"
"0","        ggplot(aes(x = JOUR, y = Total_NB_VALD)) +"
"0","        geom_line(color = ""blue"") +  # Line plot with color"
"0","        labs(title = ""Daily Ridership Trends"","
"0","             x = ""Date"","
"0","             y = ""Total_NB_VALD"") +"
"0","        scale_x_date(date_labels = ""%Y"", date_breaks = ""1 year"") +"
"0","        theme_minimal() +"
"0","        theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels"
"0",""
"0","    }"
"0","    else if (input$time_frequency == ""Monthly"") {"
"0","  monthly_data <- final_data1 %>%"
"0","    mutate(YearMonth = format(as.Date(JOUR), ""%Y-%m"")) %>%  "
"0","    group_by(YearMonth) %>%"
"0","    summarize(Total_NB_VALD = mean(Total_NB_VALD, na.rm = TRUE))"
"0","  "
"0","  monthly_data %>%"
"0","    mutate(YearMonth = as.Date(paste0(YearMonth, ""-01""))) %>%  # Convert YearMonth to Date format"
"0","    ggplot(aes(x = YearMonth, y = Total_NB_VALD)) +"
"0","    geom_line() +  # Line plot"
"0","    labs(title = ""Total_NB_VALD per Month"", x = ""Month"", y = ""Total_NB_VALD"") +"
"0","    scale_x_date(date_labels = ""%b %Y"", date_breaks = ""1 month"") +"
"0","    theme_minimal() +"
"0","    theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","}"
"0"," else if (input$time_frequency == ""Yearly"") {"
"0","  yearly_data <- final_data1 %>%"
"0","    mutate(Year = year(as.Date(JOUR))) %>%  # Convert to Year directly"
"0","    group_by(Year) %>%"
"0","    summarize(Total_NB_VALD = mean(Total_NB_VALD, na.rm = TRUE))"
"0","  if (nrow(yearly_data) > 0) {"
"0","    yearly_data %>%"
"0","        ggplot(aes(x = Year, y = Total_NB_VALD, fill = Total_NB_VALD)) +"
"0","  geom_bar(stat = ""identity"") +"
"0","  scale_fill_gradient(low = ""#ADD8E6"", high = ""#00008B"") +  # Reversed gradient"
"0","  labs(title = ""Total_NB_VALD per Year"", x = ""Year"", y = ""Total_NB_VALD"") +"
"0","  theme_minimal() +"
"0","  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","  } else {"
"0","    message(""No data available for yearly visualization."")"
"0","  }"
"0","} else if (input$time_frequency == ""Weekly"") {"
"0","      weekly_data <- final_data1 %>%"
"0","        mutate(Week = format(as.Date(JOUR), ""%Y-%U"")) %>%  # Weekly format (Year-WeekNumber)"
"0","        group_by(Week) %>%"
"0","        summarize(Total_NB_VALD = mean(Total_NB_VALD, na.rm = TRUE))"
"0",""
"0","      weekly_data %>%"
"0","        mutate(Week = as.Date(paste0(Week, ""-1""), format = ""%Y-%U-%u"")) %>%  # Convert Week to Date"
"0","        ggplot(aes(x = Week, y = Total_NB_VALD)) +"
"0","        geom_line(color = ""purple"") +"
"0","        labs(title = ""Total_NB_VALD per Week"", x = ""Week"", y = ""Total_NB_VALD"") +"
"0","        scale_x_date(date_labels = ""%Y-W%U"", date_breaks = ""4 weeks"") +"
"0","        theme_minimal() +"
"0","        theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","    }"
"0","  })"
"0","})"
"0","  filtered_hourly_data <- reactive({"
"0","    req(input$dist_station, input$dist_profile)"
"0","    merged_PROFIL_FER %>%"
"0","      filter(LIBELLE_ARRET == input$dist_station, CAT_JOUR == input$dist_profile)"
"0","  })"
"0","# Dynamically update select inputs for station and profile"
"0","  observe({"
"0","    updateSelectInput(session, ""dist_station"", "
"0","                      choices = unique(merged_PROFIL_FER$LIBELLE_ARRET))"
"0","    updateSelectInput(session, ""dist_profile"", "
"0","                      choices = unique(merged_PROFIL_FER$CAT_JOUR))"
"0","  })"
"0",""
"0"," # Bar Plot"
"0","  output$bar_plot <- renderPlot({"
"0","    data <- filtered_hourly_data()"
"0","    req(nrow(data) > 0)  # Ensure data is available"
"0","    data$pourc_validations <- as.numeric(gsub("","", ""."", data$pourc_validations))"
"0","    data$pourc_validations <- 100 * data$pourc_validations / sum(data$pourc_validations, na.rm = TRUE)"
"0","    "
"0","    time_order <- c("
"0","      ""0H-1H"", ""1H-2H"", ""2H-3H"", ""3H-4H"", ""4H-5H"", ""5H-6H"", ""6H-7H"", ""7H-8H"","
"0","      ""8H-9H"", ""9H-10H"", ""10H-11H"", ""11H-12H"", ""12H-13H"", ""13H-14H"", ""14H-15H"","
"0","      ""15H-16H"", ""16H-17H"", ""17H-18H"", ""18H-19H"", ""19H-20H"", ""20H-21H"","
"0","      ""21H-22H"", ""22H-23H"", ""23H-0H"""
"0","    )"
"0","    data$TRNC_HORR_60 <- factor(data$TRNC_HORR_60, levels = time_order)"
"0","    "
"0","    ggplot(data, aes(x = TRNC_HORR_60, y = pourc_validations, fill = TRNC_HORR_60)) +"
"0","      geom_bar(stat = ""identity"") +"
"0","      theme_minimal() +"
"0","      labs("
"0","        title = paste(""Bar Plot for Station:"", input$dist_station, ""Profile:"", input$dist_profile),"
"0","        x = ""Time Range"","
"0","        y = ""Percentage Validations"","
"0","        fill = ""Time Range"""
"0","      ) +"
"0","      theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","  })"
"0","  "
"0","  # Pie Chart"
"0","  output$pie_chart <- renderPlot({"
"0","    data <- filtered_hourly_data()"
"0","    req(nrow(data) > 0)  # Ensure data is available"
"0","    data$pourc_validations <- as.numeric(gsub("","", ""."", data$pourc_validations))"
"0","    data$pourc_validations <- 100 * data$pourc_validations / sum(data$pourc_validations, na.rm = TRUE)"
"0","    "
"0","    data$Time_Category <- case_when("
"0","      data$TRNC_HORR_60 %in% c(""5H-6H"", ""6H-7H"", ""7H-8H"", ""8H-9H"", ""9H-10H"") ~ ""MATIN 5H-10H"","
"0","      data$TRNC_HORR_60 %in% c(""10H-11H"", ""11H-12H"", ""12H-13H"", ""13H-14H"", ""14H-15H"", ""15H-16H"", ""16H-17H"") ~ ""MIDI 10H-17H"","
"0","      TRUE ~ ""NUIT 17H-5H"""
"0","    )"
"0","    "
"0","    agg_data <- data %>%"
"0","      group_by(Time_Category) %>%"
"0","      summarise(pourc_validations = sum(pourc_validations))"
"0","    "
"0","    ggplot(agg_data, aes(x = """", y = pourc_validations, fill = Time_Category)) +"
"0","      geom_bar(stat = ""identity"", width = 1) +"
"0","      coord_polar(""y"") +"
"0","      theme_void() +"
"0","      labs("
"0","        title = paste(""Time Category Distribution:"", input$dist_station, ""-"", input$dist_profile),"
"0","        fill = ""Time Categories"""
"0","      ) +"
"0","      scale_fill_manual(values = c(""MATIN 5H-10H"" = ""#4E79A7"", ""MIDI 10H-17H"" = ""#F28E2B"", ""NUIT 17H-5H"" = ""#76B7B2""))"
"0","  })"
"0","  "
"0","}"
