"0","# Define server"
"0","server <- function(input, output, session) {"
"0","  "
"0","  # Filter data based on user inputs"
"0","  filtered_data_ref <- reactive({"
"0","    final_data1 %>%"
"0","      filter(JOUR >= input$start_date_ref, JOUR <= input$end_date_ref)"
"0","  })"
"0","  "
"0","  filtered_data_comp <- reactive({"
"0","    final_data1 %>%"
"0","      filter(JOUR >= input$start_date_comp, JOUR <= input$end_date_comp)"
"0","  })"
"0","  "
"0","  # Update ridership comparison plot based on filtered data"
"0","  output$ridership_comparison <- renderPlot({"
"0","    ggplot() +"
"0","      geom_line(data = filtered_data_ref(), aes(x = JOUR, y = Total_NB_VALD, color = Weekday), linetype = ""dashed"") +"
"0","      geom_line(data = filtered_data_comp(), aes(x = JOUR, y = Total_NB_VALD, color = Weekday), linetype = ""dashed"") +"
"0","      labs(title = ""Ridership Comparison"","
"0","           x = ""Date"","
"0","           y = ""Total Validations"","
"0","           color = ""Day of the Week"") +"
"0","      theme_minimal()"
"0","  })"
"0","  "
"0","  filtered_new_data <- new_data %>%"
"0","    filter(ZdCId %in% final_data1$ID_REFA_LDA) "
"0","  "
"0","  print(filtered_new_data)"
"0","  final_data_sf <- st_as_sf(filtered_new_data, coords = c(""ZdAXEpsg2154"", ""ZdAYEpsg2154""), crs = 2154)"
"0","  final_data_sf <- st_transform(final_data_sf, 4326)  # Transform to EPSG 4326"
"0","  "
"0","  filtered_new_data$X <- st_coordinates(final_data_sf)[, ""X""]"
"0","  filtered_new_data$Y <- st_coordinates(final_data_sf)[, ""Y""]"
"0","  "
"0","  # Create a leaflet map for station selection"
"0","  output$map_station <- renderLeaflet({"
"0","    leaflet() %>%"
"0","      addTiles() %>%"
"0","      setView(lng = mean(st_coordinates(final_data_sf$geometry)[,""X""]), lat = mean(st_coordinates(final_data_sf$geometry)[,""Y""]), zoom = 11) %>%"
"0","      addMarkers(data = final_data_sf, lng = st_coordinates(final_data_sf$geometry)[,""X""], lat = st_coordinates(final_data_sf$geometry)[,""Y""])"
"0","  })"
"0","  # Observe the selection on the map and update station statistics"
"0","  observeEvent(input$map_station_marker_click, {"
"0","    click <- input$map_station_marker_click"
"0","    if (!is.null(click)) {"
"0","      lat <- click$lat"
"0","      lng <- click$lng"
"0","      print(lat)"
"0","      print(lng)"
"0","      print(str_sub(as.character(lng), end = 7))"
"0","      id = filtered_new_data %>% filter(str_detect(as.character(X), str_sub(as.character(lng), end = 7))) %>% filter(str_detect(as.character(Y), str_sub(as.character(lat), end = 7))) %>% select(ZdCId)"
"0","      print(id)"
"0","      # Filter final_data1 based on the clicked coordinates"
"0","      selected_station <- final_data1 %>% ungroup()%>%"
"0","        filter(ID_REFA_LDA==id$ZdCId[1]) %>%"
"0","        select(LIBELLE_ARRET) %>% distinct()"
"0","      print(selected_station)"
"0","      output$station_stats <- renderTable({"
"0","        summarise_data <- final_data1 %>%"
"0","          filter(LIBELLE_ARRET %in% selected_station$LIBELLE_ARRET) %>%"
"0","          group_by(LIBELLE_ARRET, Weekday) %>%"
"0","          summarise("
"0","            Total_Validations = sum(Sum_NB_VALD, na.rm = TRUE),"
"0","            Avg_Validations = mean(Sum_NB_VALD, na.rm = TRUE),"
"0","            Max_Validations = max(Sum_NB_VALD, na.rm = TRUE)"
"0","          )"
"0","        return(summarise_data)"
"0","      })"
"0","    }"
"0","  })"
"0","  "
"0","  # Add server logic for the ""Station Statistics"" tab"
"0","  observeEvent(input$station_name, {"
"0","    selected_station <- final_data1 %>%"
"0","      filter(LIBELLE_ARRET == input$station_name) %>%"
"0","      select(LIBELLE_ARRET) %>% "
"0","      distinct()"
"0","    "
"0","    output$station_stats_tab <- renderTable({"
"0","      summarise_data <- final_data1 %>%"
"0","        filter(LIBELLE_ARRET %in% selected_station$LIBELLE_ARRET) %>%"
"0","        group_by(LIBELLE_ARRET, Weekday) %>%"
"0","        summarise("
"0","          Total_Validations = sum(Sum_NB_VALD, na.rm = TRUE),"
"0","          Avg_Validations = mean(Sum_NB_VALD, na.rm = TRUE),"
"0","          Max_Validations = max(Sum_NB_VALD, na.rm = TRUE)"
"0","        )"
"0","      return(summarise_data)"
"0","    })"
"0","  })"
"0","  "
"0","  # Add server logic for the ""Holiday Statistics"" tab"
"0","  observeEvent(input$holiday_type, {"
"0","    output$holiday_stats_tab <- renderTable({"
"0","      summarise_data <- final_data1 %>%"
"0","        filter(HolidayType == input$holiday_type) %>%"
"0","        group_by(LIBELLE_ARRET, Weekday) %>%"
"0","        summarise("
"0","          Total_Validations = sum(Sum_NB_VALD, na.rm = TRUE),"
"0","          Avg_Validations = mean(Sum_NB_VALD, na.rm = TRUE),"
"0","          Max_Validations = max(Sum_NB_VALD, na.rm = TRUE)"
"0","        )"
"0","      return(summarise_data)"
"0","    })"
"0","  })"
"0","}"
